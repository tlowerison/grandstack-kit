directive @admin on FIELD_DEFINITION | INTERFACE | OBJECT

directive @me on FIELD_DEFINITION | INTERFACE | OBJECT

directive @uniqueUsername_N_this_V_117_115_101_114 on FIELD_DEFINITION

directive @uniqueEmail_N_this_V_117_115_101_114 on FIELD_DEFINITION

directive @email on FIELD_DEFINITION | INTERFACE | OBJECT

directive @uniqueUsername_N_this_V_109_101 on FIELD_DEFINITION

directive @uniqueEmail_N_this_V_109_101 on FIELD_DEFINITION

directive @username on FIELD_DEFINITION | INTERFACE | OBJECT

directive @writeMe on FIELD_DEFINITION | INTERFACE | OBJECT

directive @user on FIELD_DEFINITION | INTERFACE | OBJECT

directive @uniqueUsername_N_this_V_78_85_76_76 on FIELD_DEFINITION

directive @uniqueEmail_N_this_V_78_85_76_76 on FIELD_DEFINITION

directive @server on FIELD_DEFINITION | INTERFACE | OBJECT

directive @deleteMe on FIELD_DEFINITION | INTERFACE | OBJECT

directive @env(provides: String!) on FIELD_DEFINITION

directive @filter(expression: String!) on FIELD_DEFINITION

directive @roles(any: [Role!], all: [Role!], none: [Role!], notAll: [Role!]) on FIELD_DEFINITION | INTERFACE | OBJECT

directive @scopes(any: [Role!], all: [Role!], none: [Role!], notAll: [Role!]) on FIELD_DEFINITION | INTERFACE | OBJECT

directive @shield(expression: String!, error: String) on FIELD_DEFINITION | INTERFACE | OBJECT

directive @cypher(statement: String) on FIELD_DEFINITION

directive @relation(name: String, direction: _RelationDirections, from: String, to: String) on FIELD_DEFINITION | OBJECT

directive @additionalLabels(labels: [String]) on OBJECT

directive @MutationMeta(relationship: String, from: String, to: String) on FIELD_DEFINITION

directive @neo4j_ignore on FIELD_DEFINITION

directive @id on FIELD_DEFINITION

directive @unique on FIELD_DEFINITION

directive @index on FIELD_DEFINITION

enum Role {
  ADMIN
  SERVER
  USER
}

enum Scope {
  WRITE_ME
  DELETE_ME
}

enum _UserOrdering {
  uuid_asc
  uuid_desc
  email_asc
  email_desc
  username_asc
  username_desc
  password_asc
  password_desc
  description_asc
  description_desc
  _id_asc
  _id_desc
}

input _UserFilter {
  AND: [_UserFilter!]
  OR: [_UserFilter!]
  uuid: ID
  uuid_not: ID
  uuid_in: [ID!]
  uuid_not_in: [ID!]
  uuid_contains: ID
  uuid_not_contains: ID
  uuid_starts_with: ID
  uuid_not_starts_with: ID
  uuid_ends_with: ID
  uuid_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  roles: [Role!]
  roles_not: [Role!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  friends: _UserFilter
  friends_not: _UserFilter
  friends_in: [_UserFilter!]
  friends_not_in: [_UserFilter!]
  friends_some: _UserFilter
  friends_none: _UserFilter
  friends_single: _UserFilter
  friends_every: _UserFilter
}

type User {
  uuid: ID!
  email: String
  username: String!
  password: String
  roles: [Role]
  description: String
  friends(first: Int, offset: Int, orderBy: [_UserOrdering], filter: _UserFilter): [User]

  """
  Generated field for querying the Neo4j [system id](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-id) of this node.
  """
  _id: String
}

"""
Generated Time input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) Time value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/time/#functions-time-create-string).
  """
  formatted: String
}

"""
Generated Time object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) Time value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated Date input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) Date value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/date/#functions-date-create-string).
  """
  formatted: String
}

"""
Generated Date object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jDate {
  year: Int
  month: Int
  day: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) Date value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated DateTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) DateTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/datetime/#functions-datetime-create-string).
  """
  formatted: String
}

"""
Generated DateTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) DateTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated LocalTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jLocalTimeInput {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) LocalTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/localtime/#functions-localtime-create-string).
  """
  formatted: String
}

"""
Generated LocalTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jLocalTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) LocalTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

"""
Generated LocalDateTime input object for Neo4j [Temporal field arguments](https://grandstack.io/docs/graphql-temporal-types-datetime/#temporal-query-arguments).
"""
input _Neo4jLocalDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Creates a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime/#using-temporal-fields-in-mutations) LocalDateTime value using a [String format](https://neo4j.com/docs/cypher-manual/current/functions/temporal/localdatetime/#functions-localdatetime-create-string).
  """
  formatted: String
}

"""
Generated LocalDateTime object type for Neo4j [Temporal fields](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries).
"""
type _Neo4jLocalDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int

  """
  Outputs a Neo4j [Temporal](https://grandstack.io/docs/graphql-temporal-types-datetime#using-temporal-fields-in-queries) LocalDateTime value as a String type by using the [toString](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-tostring) Cypher function.
  """
  formatted: String
}

input _Neo4jPointDistanceFilter {
  point: _Neo4jPointInput!
  distance: Float!
}

"""
Generated Point input object for Neo4j [Spatial field arguments](https://grandstack.io/docs/graphql-spatial-types/#point-query-arguments).
"""
input _Neo4jPointInput {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

"""
Generated Point object type for Neo4j [Spatial fields](https://grandstack.io/docs/graphql-spatial-types#using-point-in-queries).
"""
type _Neo4jPoint {
  x: Float
  y: Float
  z: Float
  longitude: Float
  latitude: Float
  height: Float
  crs: String
  srid: Int
}

enum _RelationDirections {
  IN
  OUT
}

type Mutation {
  CreateUser(email: String!, password: String!, username: String!, roles: [Role!]!): User
  DeleteMe: Boolean
  SignIn(email: String, username: String, password: String!): User
  SignOut: Boolean
  SignUp(email: String!, username: String!, password: String!): User
  UpdateMe(email: String, username: String, description: String): Boolean
  UpdateUser(userUUID: ID!, email: String, username: String, description: String): Boolean
}

type Query {
  Me: User

  """
  [Generated query](https://grandstack.io/docs/graphql-schema-generation-augmentation#generated-queries) for User type nodes.
  """
  User(uuid: ID, email: String, username: String, password: String, roles: [Role], description: String, _id: String, first: Int, offset: Int, orderBy: [_UserOrdering], filter: _UserFilter): [User]
}
