type Mutation {
  # Implement email verification down the line
  CreateUser(email: String!, password: String!, username: String!, roles: [Role!]!): User
    @admin
    @email
    @username
    @uniqueEmail(this: "NULL")
    @uniqueUsername(this: "NULL")
    @cypher(statement: """
      CREATE (user:User {
        uuid: apoc.create.uuid(),
        email: $email,
        username: $username,
        password: $password,
        roles: $roles
        description: ''
      })
      RETURN user
    """)

  DeleteMe: Boolean
    @user
    @deleteMe
    @server
    @cypher(statement: "DETACH DELETE me RETURN TRUE")

  # Compare passwords in explicit resolver
  SignIn(email: String, username: String, password: String!): User
    @server

  SignOut: Boolean
    @server

  # Implement email verification down the line
  SignUp(email: String!, username: String!, password: String!): User
    @server
    @email
    @username
    @uniqueEmail(this: "NULL")
    @uniqueUsername(this: "NULL")
    @cypher(statement: """
      CREATE (user:User {
        uuid: apoc.create.uuid(),
        email: $email,
        username: $username,
        password: $password,
        roles: ['USER'],
        description: ''
      })
      RETURN user
    """)

  # Implement email verification down the line
  UpdateMe(email: String, username: String, description: String): Boolean
    @user
    @writeMe
    @email
    @username
    @uniqueEmail(this: "me")
    @uniqueUsername(this: "me")
    @cypher(statement: """
      SET me.username = CASE WHEN $username IS NOT NULL THEN $username ELSE me.username END
      SET me.email = CASE WHEN $email IS NOT NULL THEN $email ELSE me.email END
      SET me.description = CASE WHEN $description IS NOT NULL THEN $description ELSE me.description END
      RETURN TRUE
    """)

  # Implement email verification down the line
  UpdateUser(userUUID: ID!, email: String, username: String, description: String): Boolean
    @env(provides: "MATCH (user:User { uuid: $userUUID })")
    @admin
    @email
    @uniqueEmail(this: "user")
    @uniqueUsername(this: "user")
    @cypher(statement: """
      SET user.username = CASE WHEN $username IS NOT NULL THEN $username ELSE user.username END
      SET user.email = CASE WHEN $email IS NOT NULL THEN $email ELSE user.email END
      SET user.description = CASE WHEN $description IS NOT NULL THEN $description ELSE user.description END
      RETURN TRUE
    """)
}
